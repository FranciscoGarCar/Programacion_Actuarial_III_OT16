which(ints)>7
a
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
boring_function <- function(x) {
#x
}
a
submit(boring_function)
submit(x)
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
}
submit()
boring_function("My first function")
boring_function('My first function')
boring_function('My first function!')
boring_function
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
print( sum(my_vector)/length(my_vector))
}
submit()
my_mean(c(4,5,10))
remainder <- function(num, divisor=2) {
num/divisor
print(num/divisor)
}
submit()
remainder <- function(num, divisor) {
num/divisor
print(num/divisor=2)
}
submit()
remainder <- function(num=3, divisor=2) {
num/divisor
print(num/divisor)
}
submit()
remainder <- function(num=1, divisor=2) {
num/divisor
print(num/divisor)
}
submit()
remainder <- function(num, divisor=2) {
num %% divisor
print(num%%divisor)
}
submit()
remainder <- function(num, divisor=2) {
x<-num %% divisor
x
}
submit()
remainder <- function(num=1, divisor=2) {
x<-num %% divisor
x
}
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
evaluate <- function(func, dat){
x<- func(dat)
x
}
evaluate <- function(func, dat){
x<- func(dat)
x
}
submit()
evaluate(c(1,4,3.6,7.9,8.8))
evaluate(stdin,c(1,4,3.6,7.9,8.8))
evaluate(sd,c(1,4,3.6,7.9,8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(c(8,4,0))
a
evaluate(function(x)[1],c(8,4,0))
evaluate(function(x){1}, c(8,4,0))
evaluate(c[1], c(8,4,0))
evaluate(sd, c(8,4,0))
info()
boring_function <- function(x) {
x[1]
}
evaluate(boring_function,c(8,4,0))
info()
skip()
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming","is","fun!")
telegram <- function(...){
x<-  paste("START",...,"STOP")
x
}
submit()
telegram("puta", "vida")
skip()
skip()
skip()
a
paste('I','love','R!')
%p%('I','love','R!')
"%p%"('I','love','R!')
'I'%p% 'love'%p% 'R!'
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
shape_mat
class(shape_mat)
skip()
skip()
unique_vals
skip()
skip()
skip()
skip()
skip()
skip()
skip()
?tapply
skip()
skip()
skip()
skip()
skip()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants[1:10,])
head(plants,10)
skip()
skip()
skip()
skip()
ls()
info()
main()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
sample()
?sample
sample(1:6,4,replace=TRUE)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
d2
unclass(d2)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days'
difftime(Sys.time(), t1, units = 'days')
difftime(Sys.time(), t1, units = 'days')
swirl()
library(swirl)
swirl
swirl()
data(cars)
cars
?cars
head(cars)
plot(cars)
help(plot)
plot(x-axis,y-axis)
skip()
skip()
plot("Speed")
skip()
plot(x = cars$speed, y = cars$dist, xlab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
skip()
skip()
skip()
a
data(mtcars)
help(boxplot)
boxplot(mtcars,formula=mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
1
swirl()
info()
bye()
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10,replace=T)
system.time(readLines("http://www.fcfm.buap.mx"))
hilert<-function(n){
i<-1:n
1/outer(i-1,i,"+")
}
hilbert(1000)
hilbert<-function(n){
i<-1:n
1/outer(i-1,i,"+")
}
hilbert(1000)
?svd
hilbert<-function(n){
i<-1:n
1/outer(i-1,i,"+")
}
x<-hilbert(1000)
system.time(svd(x))
system.time(x<-hilbert(1000))
system.time(svd(x))
mejor<- function (estado,resultado){
#LECTURA DE DATOS
getwd()
setwd("~/GitHub/Programacion_Actuarial_III_OT16/Calidad de Hospitales - data")
a<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
#REVISION DE LA VALIDEZ
b<-factor(a[,7])
c<-attr(b,"levels")
d<-estado
e<-c( "ataque al corazon","falla cardiaca", "neumonia")
f<-factor(e)
g<-attr(f,"levels")
h<-resultado
if (length(c[c==d]) == 0 && length(g[g==h])==0 ) {
stop("Estado inválido y resultado inválido")
}
if (length(c[c==d]) == 0) {
stop("Estado inválido")
}
if (length(g[g==h])==0){
stop("resultado inválido")
}
#HOSPITAL CON TASA DE MORTALIDAD MAS BAJA
suma<-0
y<-0
if (resultado== "ataque al corazon"){
for (i in 1:nrow(a)){
if (a[i,7] == estado){
v<- a[i,11]
y<-c(y,v)
suma<-suma+1
}
}
suma1<-suma+1
x<-min(y[2:suma1],na.rm=T)
final1<-NA
for (j in 1:nrow(a)){
if (a[j,7] == estado){
if (a[j,11]==x){
final<-as.character(a[j,2])
final1<-c(final1,final)
}
}
}
final2<-sort(final1)
print(final2[1])
}
suma<-0
y<-0
if (resultado== "falla cardiaca"){
for (i in 1:nrow(a)){
if (a[i,7] == estado){
v<- a[i,17]
y<-c(y,v)
suma<-suma+1
}
}
suma1<-suma+1
x<-min(as.numeric(y[2:suma1]),na.rm=T)
final1<-NA
for (j in 1:nrow(a)){
if (a[j,7] == estado){
if (a[j,17]==x){
final<-as.character(a[j,2])
final1<-c(final1,final)
}
}
}
final2<-sort(final1)
print(final2[1])
}
suma<-0
y<-0
if (resultado== "neumonia"){
for (i in 1:nrow(a)){
if (a[i,7] == estado){
v<- a[i,23]
y<-c(y,v)
suma<-suma+1
}
}
suma1<-suma+1
x<-min(as.numeric(y[2:suma1]),na.rm=T)
final1<-NA
for (j in 1:nrow(a)){
if (a[j,7] == estado){
if ( a[j,23]==x){
final<-as.character(a[j,2])
final1<-c(final1,final)
}
}
}
final2<-sort(final1)
print(final2[1])
}
}
mejor("MD","neumonia")
mejor("TX","ataque al corazon")
mejor("MD","ataque al corazon")
mejor("TX","falla cardiaca")
mejor("TX","falla cardiaca")
mejor("MD","neumonia")
mejor("MD","neumonia")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
colnames(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
##
hist(outcome[, 11])
mejor<- function (estado,resultado){
#LECTURA DE DATOS
getwd()
setwd("~/GitHub/Programacion_Actuarial_III_OT16/Calidad de Hospitales - data")
a<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
#REVISION DE LA VALIDEZ
b<-factor(a[,7])
c<-attr(b,"levels")
d<-estado
e<-c( "ataque al corazon","falla cardiaca", "neumonia")
f<-factor(e)
g<-attr(f,"levels")
h<-resultado
if (length(c[c==d]) == 0 && length(g[g==h])==0 ) {
stop("Estado inválido y resultado inválido")
}
if (length(c[c==d]) == 0) {
stop("Estado inválido")
}
if (length(g[g==h])==0){
stop("resultado inválido")
}
#HOSPITAL CON TASA DE MORTALIDAD MAS BAJA
suma<-0
y<-0
if (resultado== "ataque al corazon"){
for (i in 1:nrow(a)){
if (a[i,7] == estado){
v<- a[i,11]
y<-c(y,v)
suma<-suma+1
}
}
suma1<-suma+1
x<-min(y[2:suma1],na.rm=T)
final1<-NA
for (j in 1:nrow(a)){
if (a[j,7] == estado){
if (a[j,11]==x){
final<-as.character(a[j,2])
final1<-c(final1,final)
}
}
}
final2<-sort(final1)
print(final2[1])
}
suma<-0
y<-0
if (resultado== "falla cardiaca"){
for (i in 1:nrow(a)){
if (a[i,7] == estado){
v<- a[i,17]
y<-c(y,v)
suma<-suma+1
}
}
suma1<-suma+1
x<-min(as.numeric(y[2:suma1]),na.rm=T)
final1<-NA
for (j in 1:nrow(a)){
if (a[j,7] == estado){
if (a[j,17]==x){
final<-as.character(a[j,2])
final1<-c(final1,final)
}
}
}
final2<-sort(final1)
print(final2[1])
}
suma<-0
y<-0
if (resultado== "neumonia"){
for (i in 1:nrow(a)){
if (a[i,7] == estado){
v<- a[i,23]
y<-c(y,v)
suma<-suma+1
}
}
suma1<-suma+1
x<-min(as.numeric(y[2:suma1]),na.rm=T)
final1<-NA
for (j in 1:nrow(a)){
if (a[j,7] == estado){
if ( a[j,23]==x){
final<-as.character(a[j,2])
final1<-c(final1,final)
}
}
}
final2<-sort(final1)
print(final2[1])
}
}
mejor("MD","neumonia")
mejor("TX","falla cardiaca")
mejor("TX","ataque al corazon")
mejor("MD","ataque al corazon")
